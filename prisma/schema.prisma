generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  image           String
  created_at      DateTime  @default(now())
  emailVerified   DateTime?
  accounts        Account[]
  sessions        Session[]
  classes         Class[]
  sections        Section[]
  verifiedStudent Boolean?
  gender          String?
  grade           String?
  college         String?
  major           String?
  homeland        String?
  bio             String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  department  String
  code        String  @unique
  name        String?
  units       String?
  description String?
  id          String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  offered     Class[]
}

model Class {
  id          String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  quarter     String
  code        String
  courseId    String?   @db.Uuid
  professorId String    @db.Uuid
  course      Course?   @relation(fields: [courseId], references: [id])
  instructor  Professor @relation(fields: [professorId], references: [id])
  sections    Section[]
  students    User[]
}

model Section {
  code        String
  total_seats Int
  school_id   String    @unique
  id          String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  meetings    Meeting[]
  class       Class     @relation(fields: [classId], references: [id])
  classId     String    @db.Uuid
  students    User[]
}

model Meeting {
  id         String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  type       String?
  daysOfWeek Int[]
  startTime  String?
  endTime    String?
  location   String?
  section    Section @relation(fields: [sectionId], references: [id])
  sectionId  String  @db.Uuid
}

model Professor {
  id      String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name    String  @unique
  classes Class[]
}
