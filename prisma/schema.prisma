generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  image           String
  created_at      DateTime       @default(now())
  emailVerified   DateTime?
  college         String?
  gender          String?
  grade           String?
  major           String?
  verifiedStudent Boolean?
  homeland        String?
  bio             String?
  accounts        Account[]
  sessions        Session[]
  classes         Class[]        @relation("ClassToUser")
  sections        Section[]      @relation("SectionToUser")
  bigHeadAvatar   BigHeadAvatar?
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  building        Building?      @relation(fields: [buildingId], references: [id])
  buildingId      String?        @db.Uuid
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  department  String
  code        String  @unique
  name        String?
  units       String?
  description String?
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offered     Class[]
}

model Class {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quarter     String
  code        String
  courseId    String?   @db.Uuid
  professorId String    @db.Uuid
  course      Course?   @relation(fields: [courseId], references: [id])
  instructor  Professor @relation(fields: [professorId], references: [id])
  sections    Section[]
  students    User[]    @relation("ClassToUser")
}

model Section {
  code        String
  total_seats Int
  school_id   String
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  classId     String    @db.Uuid
  meetings    Meeting[]
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  students    User[]    @relation("SectionToUser")
}

model Meeting {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       String?
  daysOfWeek Int[]
  startTime  String?
  endTime    String?
  location   String?
  sectionId  String  @db.Uuid
  section    Section @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Professor {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String  @unique
  school  String?
  classes Class[]
}

model BigHeadAvatar {
  id              String  @id @default(cuid())
  selected        Boolean @default(false)
  backgroundColor String?
  accessory       String?
  body            String?
  circleColor     String?
  clothing        String?
  clothingColor   String?
  eyebrows        String?
  eyes            String?
  facialHair      String?
  graphic         String?
  hair            String?
  hairColor       String?
  hat             String?
  hatColor        String?
  lashes          String?
  lipColor        String?
  mouth           String?
  skinTone        String?
  mask            Boolean
  owner           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String  @unique
}

model Post {
  id        String    @id @default(cuid())
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  anonymous Boolean   @default(false)
  content   String
  image     String?
  // region     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]    @relation("PostLikes") // Polymorphic relation
}

model Like {
  id        String   @id @default(cuid())
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], name: "PostLikes", onDelete: Cascade, onUpdate: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], name: "CommentLikes", onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]   @relation("CommentLikes") // Polymorphic relation
}

model ClassroomIdleSchedule {
  id        String   @id @default(cuid())
  quarter   String   @unique
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Building {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @unique
  users User[]
}
